from typing import List

# class Solution:
#     def numIslands(self, grid: List[List[str]]) -> int:
#         m = len(grid)
#         n = len(grid[0])
        
#         islands = {}
#         isles = 0
#         merges = 0
#         for i in range(m):
#             for j in range(n):
#                 if grid[i][j] == "1":
#                     checkleft = (j > 0 and (i,j-1) in islands)
#                     checkup = (i > 0 and (i-1,j) in islands)
#                     if checkleft and checkup:
#                         if islands[(i,j-1)] != islands[(i-1,j)]:
#                             merges += 1
#                             # update dict to replace up keys with up island number
#                             oldisle = islands[(i-1,j)]
#                             for key in islands:
#                                 if islands[key] == oldisle:
#                                     islands[key] = islands[(i,j-1)]
#                         islands[(i,j)] = islands[(i,j-1)]
#                     elif checkleft:
#                         islands[(i,j)] = islands[(i,j-1)]
#                     elif checkup:
#                         islands[(i,j)] = islands[(i-1,j)]
#                     else:
#                         isles += 1
#                         islands[(i,j)] = isles
#         return isles - merges


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        n = len(grid[0])
        
        islands = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "1":
                    islands += 1
                    grid[i][j] = "0"
                    queue = [(i,j)]
                    while queue:
                        ic,jc = queue.pop(0)
                        if (ic+1 < m) and grid[ic+1][jc] == "1":
                            grid[ic+1][jc] = "0"
                            queue.append((ic+1,jc))
                        if (ic-1 >= 0) and grid[ic-1][jc] == "1":
                            grid[ic-1][jc] = "0"
                            queue.append((ic-1,jc))
                        if (jc+1 < n) and grid[ic][jc+1] == "1":
                            grid[ic][jc+1] = "0"
                            queue.append((ic,jc+1))
                        if (jc-1 >= 0) and grid[ic][jc-1] == "1":
                            grid[ic][jc-1] = "0"
                            queue.append((ic,jc-1))
        
        return islands


# grid = [
#   ["1","1","1","1","0"],
#   ["1","1","0","1","0"],
#   ["1","1","0","0","0"],
#   ["0","0","0","0","0"]
# ]

# grid = [
#   ["1","1","0","0","0"],
#   ["1","1","0","0","0"],
#   ["0","0","1","0","0"],
#   ["0","0","0","1","1"]
# ]

# grid = [["1","1","1"],["0","1","0"],["1","1","1"]]

# grid = [["1","1","1","1","1","0","1","1","1","1"],["1","0","1","0","1","1","1","1","1","1"],["0","1","1","1","0","1","1","1","1","1"],["1","1","0","1","1","0","0","0","0","1"],["1","0","1","0","1","0","0","1","0","1"],["1","0","0","1","1","1","0","1","0","0"],["0","0","1","0","0","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","1"],["1","1","1","1","1","1","1","1","0","1"],["1","0","1","1","1","1","1","1","1","0"]]

grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
test = Solution()
print(test.numIslands(grid))